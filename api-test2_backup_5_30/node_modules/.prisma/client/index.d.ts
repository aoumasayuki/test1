
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CsvData
 * 
 */
export type CsvData = $Result.DefaultSelection<Prisma.$CsvDataPayload>
/**
 * Model StateTimestamps
 * 
 */
export type StateTimestamps = $Result.DefaultSelection<Prisma.$StateTimestampsPayload>
/**
 * Model PhaseLog
 * 
 */
export type PhaseLog = $Result.DefaultSelection<Prisma.$PhaseLogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CsvData
 * const csvData = await prisma.csvData.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CsvData
   * const csvData = await prisma.csvData.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.csvData`: Exposes CRUD operations for the **CsvData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CsvData
    * const csvData = await prisma.csvData.findMany()
    * ```
    */
  get csvData(): Prisma.CsvDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stateTimestamps`: Exposes CRUD operations for the **StateTimestamps** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StateTimestamps
    * const stateTimestamps = await prisma.stateTimestamps.findMany()
    * ```
    */
  get stateTimestamps(): Prisma.StateTimestampsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.phaseLog`: Exposes CRUD operations for the **PhaseLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PhaseLogs
    * const phaseLogs = await prisma.phaseLog.findMany()
    * ```
    */
  get phaseLog(): Prisma.PhaseLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CsvData: 'CsvData',
    StateTimestamps: 'StateTimestamps',
    PhaseLog: 'PhaseLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "csvData" | "stateTimestamps" | "phaseLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      CsvData: {
        payload: Prisma.$CsvDataPayload<ExtArgs>
        fields: Prisma.CsvDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CsvDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CsvDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          findFirst: {
            args: Prisma.CsvDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CsvDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          findMany: {
            args: Prisma.CsvDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>[]
          }
          create: {
            args: Prisma.CsvDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          createMany: {
            args: Prisma.CsvDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CsvDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          update: {
            args: Prisma.CsvDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          deleteMany: {
            args: Prisma.CsvDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CsvDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CsvDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CsvDataPayload>
          }
          aggregate: {
            args: Prisma.CsvDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCsvData>
          }
          groupBy: {
            args: Prisma.CsvDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CsvDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CsvDataCountArgs<ExtArgs>
            result: $Utils.Optional<CsvDataCountAggregateOutputType> | number
          }
        }
      }
      StateTimestamps: {
        payload: Prisma.$StateTimestampsPayload<ExtArgs>
        fields: Prisma.StateTimestampsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StateTimestampsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StateTimestampsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          findFirst: {
            args: Prisma.StateTimestampsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StateTimestampsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          findMany: {
            args: Prisma.StateTimestampsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>[]
          }
          create: {
            args: Prisma.StateTimestampsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          createMany: {
            args: Prisma.StateTimestampsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StateTimestampsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          update: {
            args: Prisma.StateTimestampsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          deleteMany: {
            args: Prisma.StateTimestampsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StateTimestampsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StateTimestampsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StateTimestampsPayload>
          }
          aggregate: {
            args: Prisma.StateTimestampsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStateTimestamps>
          }
          groupBy: {
            args: Prisma.StateTimestampsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StateTimestampsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StateTimestampsCountArgs<ExtArgs>
            result: $Utils.Optional<StateTimestampsCountAggregateOutputType> | number
          }
        }
      }
      PhaseLog: {
        payload: Prisma.$PhaseLogPayload<ExtArgs>
        fields: Prisma.PhaseLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhaseLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhaseLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          findFirst: {
            args: Prisma.PhaseLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhaseLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          findMany: {
            args: Prisma.PhaseLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>[]
          }
          create: {
            args: Prisma.PhaseLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          createMany: {
            args: Prisma.PhaseLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PhaseLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          update: {
            args: Prisma.PhaseLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          deleteMany: {
            args: Prisma.PhaseLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhaseLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PhaseLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhaseLogPayload>
          }
          aggregate: {
            args: Prisma.PhaseLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhaseLog>
          }
          groupBy: {
            args: Prisma.PhaseLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhaseLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhaseLogCountArgs<ExtArgs>
            result: $Utils.Optional<PhaseLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    csvData?: CsvDataOmit
    stateTimestamps?: StateTimestampsOmit
    phaseLog?: PhaseLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model CsvData
   */

  export type AggregateCsvData = {
    _count: CsvDataCountAggregateOutputType | null
    _avg: CsvDataAvgAggregateOutputType | null
    _sum: CsvDataSumAggregateOutputType | null
    _min: CsvDataMinAggregateOutputType | null
    _max: CsvDataMaxAggregateOutputType | null
  }

  export type CsvDataAvgAggregateOutputType = {
    id: number | null
    Heart_Rate: number | null
  }

  export type CsvDataSumAggregateOutputType = {
    id: number | null
    Heart_Rate: number | null
  }

  export type CsvDataMinAggregateOutputType = {
    id: number | null
    Heart_Rate: number | null
    Timestamp: Date | null
  }

  export type CsvDataMaxAggregateOutputType = {
    id: number | null
    Heart_Rate: number | null
    Timestamp: Date | null
  }

  export type CsvDataCountAggregateOutputType = {
    id: number
    Heart_Rate: number
    Timestamp: number
    _all: number
  }


  export type CsvDataAvgAggregateInputType = {
    id?: true
    Heart_Rate?: true
  }

  export type CsvDataSumAggregateInputType = {
    id?: true
    Heart_Rate?: true
  }

  export type CsvDataMinAggregateInputType = {
    id?: true
    Heart_Rate?: true
    Timestamp?: true
  }

  export type CsvDataMaxAggregateInputType = {
    id?: true
    Heart_Rate?: true
    Timestamp?: true
  }

  export type CsvDataCountAggregateInputType = {
    id?: true
    Heart_Rate?: true
    Timestamp?: true
    _all?: true
  }

  export type CsvDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CsvData to aggregate.
     */
    where?: CsvDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CsvData to fetch.
     */
    orderBy?: CsvDataOrderByWithRelationInput | CsvDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CsvDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CsvData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CsvData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CsvData
    **/
    _count?: true | CsvDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CsvDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CsvDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CsvDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CsvDataMaxAggregateInputType
  }

  export type GetCsvDataAggregateType<T extends CsvDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCsvData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCsvData[P]>
      : GetScalarType<T[P], AggregateCsvData[P]>
  }




  export type CsvDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CsvDataWhereInput
    orderBy?: CsvDataOrderByWithAggregationInput | CsvDataOrderByWithAggregationInput[]
    by: CsvDataScalarFieldEnum[] | CsvDataScalarFieldEnum
    having?: CsvDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CsvDataCountAggregateInputType | true
    _avg?: CsvDataAvgAggregateInputType
    _sum?: CsvDataSumAggregateInputType
    _min?: CsvDataMinAggregateInputType
    _max?: CsvDataMaxAggregateInputType
  }

  export type CsvDataGroupByOutputType = {
    id: number
    Heart_Rate: number
    Timestamp: Date
    _count: CsvDataCountAggregateOutputType | null
    _avg: CsvDataAvgAggregateOutputType | null
    _sum: CsvDataSumAggregateOutputType | null
    _min: CsvDataMinAggregateOutputType | null
    _max: CsvDataMaxAggregateOutputType | null
  }

  type GetCsvDataGroupByPayload<T extends CsvDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CsvDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CsvDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CsvDataGroupByOutputType[P]>
            : GetScalarType<T[P], CsvDataGroupByOutputType[P]>
        }
      >
    >


  export type CsvDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Heart_Rate?: boolean
    Timestamp?: boolean
  }, ExtArgs["result"]["csvData"]>



  export type CsvDataSelectScalar = {
    id?: boolean
    Heart_Rate?: boolean
    Timestamp?: boolean
  }

  export type CsvDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Heart_Rate" | "Timestamp", ExtArgs["result"]["csvData"]>

  export type $CsvDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CsvData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Heart_Rate: number
      Timestamp: Date
    }, ExtArgs["result"]["csvData"]>
    composites: {}
  }

  type CsvDataGetPayload<S extends boolean | null | undefined | CsvDataDefaultArgs> = $Result.GetResult<Prisma.$CsvDataPayload, S>

  type CsvDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CsvDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CsvDataCountAggregateInputType | true
    }

  export interface CsvDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CsvData'], meta: { name: 'CsvData' } }
    /**
     * Find zero or one CsvData that matches the filter.
     * @param {CsvDataFindUniqueArgs} args - Arguments to find a CsvData
     * @example
     * // Get one CsvData
     * const csvData = await prisma.csvData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CsvDataFindUniqueArgs>(args: SelectSubset<T, CsvDataFindUniqueArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CsvData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CsvDataFindUniqueOrThrowArgs} args - Arguments to find a CsvData
     * @example
     * // Get one CsvData
     * const csvData = await prisma.csvData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CsvDataFindUniqueOrThrowArgs>(args: SelectSubset<T, CsvDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CsvData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataFindFirstArgs} args - Arguments to find a CsvData
     * @example
     * // Get one CsvData
     * const csvData = await prisma.csvData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CsvDataFindFirstArgs>(args?: SelectSubset<T, CsvDataFindFirstArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CsvData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataFindFirstOrThrowArgs} args - Arguments to find a CsvData
     * @example
     * // Get one CsvData
     * const csvData = await prisma.csvData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CsvDataFindFirstOrThrowArgs>(args?: SelectSubset<T, CsvDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CsvData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CsvData
     * const csvData = await prisma.csvData.findMany()
     * 
     * // Get first 10 CsvData
     * const csvData = await prisma.csvData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const csvDataWithIdOnly = await prisma.csvData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CsvDataFindManyArgs>(args?: SelectSubset<T, CsvDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CsvData.
     * @param {CsvDataCreateArgs} args - Arguments to create a CsvData.
     * @example
     * // Create one CsvData
     * const CsvData = await prisma.csvData.create({
     *   data: {
     *     // ... data to create a CsvData
     *   }
     * })
     * 
     */
    create<T extends CsvDataCreateArgs>(args: SelectSubset<T, CsvDataCreateArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CsvData.
     * @param {CsvDataCreateManyArgs} args - Arguments to create many CsvData.
     * @example
     * // Create many CsvData
     * const csvData = await prisma.csvData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CsvDataCreateManyArgs>(args?: SelectSubset<T, CsvDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CsvData.
     * @param {CsvDataDeleteArgs} args - Arguments to delete one CsvData.
     * @example
     * // Delete one CsvData
     * const CsvData = await prisma.csvData.delete({
     *   where: {
     *     // ... filter to delete one CsvData
     *   }
     * })
     * 
     */
    delete<T extends CsvDataDeleteArgs>(args: SelectSubset<T, CsvDataDeleteArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CsvData.
     * @param {CsvDataUpdateArgs} args - Arguments to update one CsvData.
     * @example
     * // Update one CsvData
     * const csvData = await prisma.csvData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CsvDataUpdateArgs>(args: SelectSubset<T, CsvDataUpdateArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CsvData.
     * @param {CsvDataDeleteManyArgs} args - Arguments to filter CsvData to delete.
     * @example
     * // Delete a few CsvData
     * const { count } = await prisma.csvData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CsvDataDeleteManyArgs>(args?: SelectSubset<T, CsvDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CsvData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CsvData
     * const csvData = await prisma.csvData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CsvDataUpdateManyArgs>(args: SelectSubset<T, CsvDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CsvData.
     * @param {CsvDataUpsertArgs} args - Arguments to update or create a CsvData.
     * @example
     * // Update or create a CsvData
     * const csvData = await prisma.csvData.upsert({
     *   create: {
     *     // ... data to create a CsvData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CsvData we want to update
     *   }
     * })
     */
    upsert<T extends CsvDataUpsertArgs>(args: SelectSubset<T, CsvDataUpsertArgs<ExtArgs>>): Prisma__CsvDataClient<$Result.GetResult<Prisma.$CsvDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CsvData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataCountArgs} args - Arguments to filter CsvData to count.
     * @example
     * // Count the number of CsvData
     * const count = await prisma.csvData.count({
     *   where: {
     *     // ... the filter for the CsvData we want to count
     *   }
     * })
    **/
    count<T extends CsvDataCountArgs>(
      args?: Subset<T, CsvDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CsvDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CsvData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CsvDataAggregateArgs>(args: Subset<T, CsvDataAggregateArgs>): Prisma.PrismaPromise<GetCsvDataAggregateType<T>>

    /**
     * Group by CsvData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CsvDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CsvDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CsvDataGroupByArgs['orderBy'] }
        : { orderBy?: CsvDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CsvDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCsvDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CsvData model
   */
  readonly fields: CsvDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CsvData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CsvDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CsvData model
   */
  interface CsvDataFieldRefs {
    readonly id: FieldRef<"CsvData", 'Int'>
    readonly Heart_Rate: FieldRef<"CsvData", 'Int'>
    readonly Timestamp: FieldRef<"CsvData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CsvData findUnique
   */
  export type CsvDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter, which CsvData to fetch.
     */
    where: CsvDataWhereUniqueInput
  }

  /**
   * CsvData findUniqueOrThrow
   */
  export type CsvDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter, which CsvData to fetch.
     */
    where: CsvDataWhereUniqueInput
  }

  /**
   * CsvData findFirst
   */
  export type CsvDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter, which CsvData to fetch.
     */
    where?: CsvDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CsvData to fetch.
     */
    orderBy?: CsvDataOrderByWithRelationInput | CsvDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CsvData.
     */
    cursor?: CsvDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CsvData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CsvData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CsvData.
     */
    distinct?: CsvDataScalarFieldEnum | CsvDataScalarFieldEnum[]
  }

  /**
   * CsvData findFirstOrThrow
   */
  export type CsvDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter, which CsvData to fetch.
     */
    where?: CsvDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CsvData to fetch.
     */
    orderBy?: CsvDataOrderByWithRelationInput | CsvDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CsvData.
     */
    cursor?: CsvDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CsvData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CsvData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CsvData.
     */
    distinct?: CsvDataScalarFieldEnum | CsvDataScalarFieldEnum[]
  }

  /**
   * CsvData findMany
   */
  export type CsvDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter, which CsvData to fetch.
     */
    where?: CsvDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CsvData to fetch.
     */
    orderBy?: CsvDataOrderByWithRelationInput | CsvDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CsvData.
     */
    cursor?: CsvDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CsvData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CsvData.
     */
    skip?: number
    distinct?: CsvDataScalarFieldEnum | CsvDataScalarFieldEnum[]
  }

  /**
   * CsvData create
   */
  export type CsvDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * The data needed to create a CsvData.
     */
    data: XOR<CsvDataCreateInput, CsvDataUncheckedCreateInput>
  }

  /**
   * CsvData createMany
   */
  export type CsvDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CsvData.
     */
    data: CsvDataCreateManyInput | CsvDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CsvData update
   */
  export type CsvDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * The data needed to update a CsvData.
     */
    data: XOR<CsvDataUpdateInput, CsvDataUncheckedUpdateInput>
    /**
     * Choose, which CsvData to update.
     */
    where: CsvDataWhereUniqueInput
  }

  /**
   * CsvData updateMany
   */
  export type CsvDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CsvData.
     */
    data: XOR<CsvDataUpdateManyMutationInput, CsvDataUncheckedUpdateManyInput>
    /**
     * Filter which CsvData to update
     */
    where?: CsvDataWhereInput
    /**
     * Limit how many CsvData to update.
     */
    limit?: number
  }

  /**
   * CsvData upsert
   */
  export type CsvDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * The filter to search for the CsvData to update in case it exists.
     */
    where: CsvDataWhereUniqueInput
    /**
     * In case the CsvData found by the `where` argument doesn't exist, create a new CsvData with this data.
     */
    create: XOR<CsvDataCreateInput, CsvDataUncheckedCreateInput>
    /**
     * In case the CsvData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CsvDataUpdateInput, CsvDataUncheckedUpdateInput>
  }

  /**
   * CsvData delete
   */
  export type CsvDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
    /**
     * Filter which CsvData to delete.
     */
    where: CsvDataWhereUniqueInput
  }

  /**
   * CsvData deleteMany
   */
  export type CsvDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CsvData to delete
     */
    where?: CsvDataWhereInput
    /**
     * Limit how many CsvData to delete.
     */
    limit?: number
  }

  /**
   * CsvData without action
   */
  export type CsvDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CsvData
     */
    select?: CsvDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CsvData
     */
    omit?: CsvDataOmit<ExtArgs> | null
  }


  /**
   * Model StateTimestamps
   */

  export type AggregateStateTimestamps = {
    _count: StateTimestampsCountAggregateOutputType | null
    _avg: StateTimestampsAvgAggregateOutputType | null
    _sum: StateTimestampsSumAggregateOutputType | null
    _min: StateTimestampsMinAggregateOutputType | null
    _max: StateTimestampsMaxAggregateOutputType | null
  }

  export type StateTimestampsAvgAggregateOutputType = {
    id: number | null
  }

  export type StateTimestampsSumAggregateOutputType = {
    id: number | null
  }

  export type StateTimestampsMinAggregateOutputType = {
    id: number | null
    stateName: string | null
    startTime: Date | null
  }

  export type StateTimestampsMaxAggregateOutputType = {
    id: number | null
    stateName: string | null
    startTime: Date | null
  }

  export type StateTimestampsCountAggregateOutputType = {
    id: number
    stateName: number
    startTime: number
    _all: number
  }


  export type StateTimestampsAvgAggregateInputType = {
    id?: true
  }

  export type StateTimestampsSumAggregateInputType = {
    id?: true
  }

  export type StateTimestampsMinAggregateInputType = {
    id?: true
    stateName?: true
    startTime?: true
  }

  export type StateTimestampsMaxAggregateInputType = {
    id?: true
    stateName?: true
    startTime?: true
  }

  export type StateTimestampsCountAggregateInputType = {
    id?: true
    stateName?: true
    startTime?: true
    _all?: true
  }

  export type StateTimestampsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StateTimestamps to aggregate.
     */
    where?: StateTimestampsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StateTimestamps to fetch.
     */
    orderBy?: StateTimestampsOrderByWithRelationInput | StateTimestampsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StateTimestampsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StateTimestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StateTimestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StateTimestamps
    **/
    _count?: true | StateTimestampsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StateTimestampsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StateTimestampsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StateTimestampsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StateTimestampsMaxAggregateInputType
  }

  export type GetStateTimestampsAggregateType<T extends StateTimestampsAggregateArgs> = {
        [P in keyof T & keyof AggregateStateTimestamps]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStateTimestamps[P]>
      : GetScalarType<T[P], AggregateStateTimestamps[P]>
  }




  export type StateTimestampsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StateTimestampsWhereInput
    orderBy?: StateTimestampsOrderByWithAggregationInput | StateTimestampsOrderByWithAggregationInput[]
    by: StateTimestampsScalarFieldEnum[] | StateTimestampsScalarFieldEnum
    having?: StateTimestampsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StateTimestampsCountAggregateInputType | true
    _avg?: StateTimestampsAvgAggregateInputType
    _sum?: StateTimestampsSumAggregateInputType
    _min?: StateTimestampsMinAggregateInputType
    _max?: StateTimestampsMaxAggregateInputType
  }

  export type StateTimestampsGroupByOutputType = {
    id: number
    stateName: string
    startTime: Date
    _count: StateTimestampsCountAggregateOutputType | null
    _avg: StateTimestampsAvgAggregateOutputType | null
    _sum: StateTimestampsSumAggregateOutputType | null
    _min: StateTimestampsMinAggregateOutputType | null
    _max: StateTimestampsMaxAggregateOutputType | null
  }

  type GetStateTimestampsGroupByPayload<T extends StateTimestampsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StateTimestampsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StateTimestampsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StateTimestampsGroupByOutputType[P]>
            : GetScalarType<T[P], StateTimestampsGroupByOutputType[P]>
        }
      >
    >


  export type StateTimestampsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stateName?: boolean
    startTime?: boolean
  }, ExtArgs["result"]["stateTimestamps"]>



  export type StateTimestampsSelectScalar = {
    id?: boolean
    stateName?: boolean
    startTime?: boolean
  }

  export type StateTimestampsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stateName" | "startTime", ExtArgs["result"]["stateTimestamps"]>

  export type $StateTimestampsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StateTimestamps"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stateName: string
      startTime: Date
    }, ExtArgs["result"]["stateTimestamps"]>
    composites: {}
  }

  type StateTimestampsGetPayload<S extends boolean | null | undefined | StateTimestampsDefaultArgs> = $Result.GetResult<Prisma.$StateTimestampsPayload, S>

  type StateTimestampsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StateTimestampsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StateTimestampsCountAggregateInputType | true
    }

  export interface StateTimestampsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StateTimestamps'], meta: { name: 'StateTimestamps' } }
    /**
     * Find zero or one StateTimestamps that matches the filter.
     * @param {StateTimestampsFindUniqueArgs} args - Arguments to find a StateTimestamps
     * @example
     * // Get one StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StateTimestampsFindUniqueArgs>(args: SelectSubset<T, StateTimestampsFindUniqueArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StateTimestamps that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StateTimestampsFindUniqueOrThrowArgs} args - Arguments to find a StateTimestamps
     * @example
     * // Get one StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StateTimestampsFindUniqueOrThrowArgs>(args: SelectSubset<T, StateTimestampsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StateTimestamps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsFindFirstArgs} args - Arguments to find a StateTimestamps
     * @example
     * // Get one StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StateTimestampsFindFirstArgs>(args?: SelectSubset<T, StateTimestampsFindFirstArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StateTimestamps that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsFindFirstOrThrowArgs} args - Arguments to find a StateTimestamps
     * @example
     * // Get one StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StateTimestampsFindFirstOrThrowArgs>(args?: SelectSubset<T, StateTimestampsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StateTimestamps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findMany()
     * 
     * // Get first 10 StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stateTimestampsWithIdOnly = await prisma.stateTimestamps.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StateTimestampsFindManyArgs>(args?: SelectSubset<T, StateTimestampsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StateTimestamps.
     * @param {StateTimestampsCreateArgs} args - Arguments to create a StateTimestamps.
     * @example
     * // Create one StateTimestamps
     * const StateTimestamps = await prisma.stateTimestamps.create({
     *   data: {
     *     // ... data to create a StateTimestamps
     *   }
     * })
     * 
     */
    create<T extends StateTimestampsCreateArgs>(args: SelectSubset<T, StateTimestampsCreateArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StateTimestamps.
     * @param {StateTimestampsCreateManyArgs} args - Arguments to create many StateTimestamps.
     * @example
     * // Create many StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StateTimestampsCreateManyArgs>(args?: SelectSubset<T, StateTimestampsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StateTimestamps.
     * @param {StateTimestampsDeleteArgs} args - Arguments to delete one StateTimestamps.
     * @example
     * // Delete one StateTimestamps
     * const StateTimestamps = await prisma.stateTimestamps.delete({
     *   where: {
     *     // ... filter to delete one StateTimestamps
     *   }
     * })
     * 
     */
    delete<T extends StateTimestampsDeleteArgs>(args: SelectSubset<T, StateTimestampsDeleteArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StateTimestamps.
     * @param {StateTimestampsUpdateArgs} args - Arguments to update one StateTimestamps.
     * @example
     * // Update one StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StateTimestampsUpdateArgs>(args: SelectSubset<T, StateTimestampsUpdateArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StateTimestamps.
     * @param {StateTimestampsDeleteManyArgs} args - Arguments to filter StateTimestamps to delete.
     * @example
     * // Delete a few StateTimestamps
     * const { count } = await prisma.stateTimestamps.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StateTimestampsDeleteManyArgs>(args?: SelectSubset<T, StateTimestampsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StateTimestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StateTimestampsUpdateManyArgs>(args: SelectSubset<T, StateTimestampsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StateTimestamps.
     * @param {StateTimestampsUpsertArgs} args - Arguments to update or create a StateTimestamps.
     * @example
     * // Update or create a StateTimestamps
     * const stateTimestamps = await prisma.stateTimestamps.upsert({
     *   create: {
     *     // ... data to create a StateTimestamps
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StateTimestamps we want to update
     *   }
     * })
     */
    upsert<T extends StateTimestampsUpsertArgs>(args: SelectSubset<T, StateTimestampsUpsertArgs<ExtArgs>>): Prisma__StateTimestampsClient<$Result.GetResult<Prisma.$StateTimestampsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StateTimestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsCountArgs} args - Arguments to filter StateTimestamps to count.
     * @example
     * // Count the number of StateTimestamps
     * const count = await prisma.stateTimestamps.count({
     *   where: {
     *     // ... the filter for the StateTimestamps we want to count
     *   }
     * })
    **/
    count<T extends StateTimestampsCountArgs>(
      args?: Subset<T, StateTimestampsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StateTimestampsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StateTimestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StateTimestampsAggregateArgs>(args: Subset<T, StateTimestampsAggregateArgs>): Prisma.PrismaPromise<GetStateTimestampsAggregateType<T>>

    /**
     * Group by StateTimestamps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StateTimestampsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StateTimestampsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StateTimestampsGroupByArgs['orderBy'] }
        : { orderBy?: StateTimestampsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StateTimestampsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStateTimestampsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StateTimestamps model
   */
  readonly fields: StateTimestampsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StateTimestamps.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StateTimestampsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StateTimestamps model
   */
  interface StateTimestampsFieldRefs {
    readonly id: FieldRef<"StateTimestamps", 'Int'>
    readonly stateName: FieldRef<"StateTimestamps", 'String'>
    readonly startTime: FieldRef<"StateTimestamps", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StateTimestamps findUnique
   */
  export type StateTimestampsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter, which StateTimestamps to fetch.
     */
    where: StateTimestampsWhereUniqueInput
  }

  /**
   * StateTimestamps findUniqueOrThrow
   */
  export type StateTimestampsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter, which StateTimestamps to fetch.
     */
    where: StateTimestampsWhereUniqueInput
  }

  /**
   * StateTimestamps findFirst
   */
  export type StateTimestampsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter, which StateTimestamps to fetch.
     */
    where?: StateTimestampsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StateTimestamps to fetch.
     */
    orderBy?: StateTimestampsOrderByWithRelationInput | StateTimestampsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StateTimestamps.
     */
    cursor?: StateTimestampsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StateTimestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StateTimestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StateTimestamps.
     */
    distinct?: StateTimestampsScalarFieldEnum | StateTimestampsScalarFieldEnum[]
  }

  /**
   * StateTimestamps findFirstOrThrow
   */
  export type StateTimestampsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter, which StateTimestamps to fetch.
     */
    where?: StateTimestampsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StateTimestamps to fetch.
     */
    orderBy?: StateTimestampsOrderByWithRelationInput | StateTimestampsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StateTimestamps.
     */
    cursor?: StateTimestampsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StateTimestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StateTimestamps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StateTimestamps.
     */
    distinct?: StateTimestampsScalarFieldEnum | StateTimestampsScalarFieldEnum[]
  }

  /**
   * StateTimestamps findMany
   */
  export type StateTimestampsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter, which StateTimestamps to fetch.
     */
    where?: StateTimestampsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StateTimestamps to fetch.
     */
    orderBy?: StateTimestampsOrderByWithRelationInput | StateTimestampsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StateTimestamps.
     */
    cursor?: StateTimestampsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StateTimestamps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StateTimestamps.
     */
    skip?: number
    distinct?: StateTimestampsScalarFieldEnum | StateTimestampsScalarFieldEnum[]
  }

  /**
   * StateTimestamps create
   */
  export type StateTimestampsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * The data needed to create a StateTimestamps.
     */
    data: XOR<StateTimestampsCreateInput, StateTimestampsUncheckedCreateInput>
  }

  /**
   * StateTimestamps createMany
   */
  export type StateTimestampsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StateTimestamps.
     */
    data: StateTimestampsCreateManyInput | StateTimestampsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StateTimestamps update
   */
  export type StateTimestampsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * The data needed to update a StateTimestamps.
     */
    data: XOR<StateTimestampsUpdateInput, StateTimestampsUncheckedUpdateInput>
    /**
     * Choose, which StateTimestamps to update.
     */
    where: StateTimestampsWhereUniqueInput
  }

  /**
   * StateTimestamps updateMany
   */
  export type StateTimestampsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StateTimestamps.
     */
    data: XOR<StateTimestampsUpdateManyMutationInput, StateTimestampsUncheckedUpdateManyInput>
    /**
     * Filter which StateTimestamps to update
     */
    where?: StateTimestampsWhereInput
    /**
     * Limit how many StateTimestamps to update.
     */
    limit?: number
  }

  /**
   * StateTimestamps upsert
   */
  export type StateTimestampsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * The filter to search for the StateTimestamps to update in case it exists.
     */
    where: StateTimestampsWhereUniqueInput
    /**
     * In case the StateTimestamps found by the `where` argument doesn't exist, create a new StateTimestamps with this data.
     */
    create: XOR<StateTimestampsCreateInput, StateTimestampsUncheckedCreateInput>
    /**
     * In case the StateTimestamps was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StateTimestampsUpdateInput, StateTimestampsUncheckedUpdateInput>
  }

  /**
   * StateTimestamps delete
   */
  export type StateTimestampsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
    /**
     * Filter which StateTimestamps to delete.
     */
    where: StateTimestampsWhereUniqueInput
  }

  /**
   * StateTimestamps deleteMany
   */
  export type StateTimestampsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StateTimestamps to delete
     */
    where?: StateTimestampsWhereInput
    /**
     * Limit how many StateTimestamps to delete.
     */
    limit?: number
  }

  /**
   * StateTimestamps without action
   */
  export type StateTimestampsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StateTimestamps
     */
    select?: StateTimestampsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StateTimestamps
     */
    omit?: StateTimestampsOmit<ExtArgs> | null
  }


  /**
   * Model PhaseLog
   */

  export type AggregatePhaseLog = {
    _count: PhaseLogCountAggregateOutputType | null
    _avg: PhaseLogAvgAggregateOutputType | null
    _sum: PhaseLogSumAggregateOutputType | null
    _min: PhaseLogMinAggregateOutputType | null
    _max: PhaseLogMaxAggregateOutputType | null
  }

  export type PhaseLogAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
  }

  export type PhaseLogSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
  }

  export type PhaseLogMinAggregateOutputType = {
    id: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    gameDate: string | null
    gamePhase: string | null
    game: string | null
    sessionId: number | null
  }

  export type PhaseLogMaxAggregateOutputType = {
    id: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    gameDate: string | null
    gamePhase: string | null
    game: string | null
    sessionId: number | null
  }

  export type PhaseLogCountAggregateOutputType = {
    id: number
    startTime: number
    endTime: number
    createdAt: number
    gameDate: number
    gamePhase: number
    game: number
    sessionId: number
    _all: number
  }


  export type PhaseLogAvgAggregateInputType = {
    id?: true
    sessionId?: true
  }

  export type PhaseLogSumAggregateInputType = {
    id?: true
    sessionId?: true
  }

  export type PhaseLogMinAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    gameDate?: true
    gamePhase?: true
    game?: true
    sessionId?: true
  }

  export type PhaseLogMaxAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    gameDate?: true
    gamePhase?: true
    game?: true
    sessionId?: true
  }

  export type PhaseLogCountAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    gameDate?: true
    gamePhase?: true
    game?: true
    sessionId?: true
    _all?: true
  }

  export type PhaseLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhaseLog to aggregate.
     */
    where?: PhaseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhaseLogs to fetch.
     */
    orderBy?: PhaseLogOrderByWithRelationInput | PhaseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhaseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhaseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhaseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PhaseLogs
    **/
    _count?: true | PhaseLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhaseLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhaseLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhaseLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhaseLogMaxAggregateInputType
  }

  export type GetPhaseLogAggregateType<T extends PhaseLogAggregateArgs> = {
        [P in keyof T & keyof AggregatePhaseLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhaseLog[P]>
      : GetScalarType<T[P], AggregatePhaseLog[P]>
  }




  export type PhaseLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhaseLogWhereInput
    orderBy?: PhaseLogOrderByWithAggregationInput | PhaseLogOrderByWithAggregationInput[]
    by: PhaseLogScalarFieldEnum[] | PhaseLogScalarFieldEnum
    having?: PhaseLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhaseLogCountAggregateInputType | true
    _avg?: PhaseLogAvgAggregateInputType
    _sum?: PhaseLogSumAggregateInputType
    _min?: PhaseLogMinAggregateInputType
    _max?: PhaseLogMaxAggregateInputType
  }

  export type PhaseLogGroupByOutputType = {
    id: number
    startTime: Date
    endTime: Date | null
    createdAt: Date
    gameDate: string
    gamePhase: string
    game: string
    sessionId: number
    _count: PhaseLogCountAggregateOutputType | null
    _avg: PhaseLogAvgAggregateOutputType | null
    _sum: PhaseLogSumAggregateOutputType | null
    _min: PhaseLogMinAggregateOutputType | null
    _max: PhaseLogMaxAggregateOutputType | null
  }

  type GetPhaseLogGroupByPayload<T extends PhaseLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhaseLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhaseLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhaseLogGroupByOutputType[P]>
            : GetScalarType<T[P], PhaseLogGroupByOutputType[P]>
        }
      >
    >


  export type PhaseLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    gameDate?: boolean
    gamePhase?: boolean
    game?: boolean
    sessionId?: boolean
  }, ExtArgs["result"]["phaseLog"]>



  export type PhaseLogSelectScalar = {
    id?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    gameDate?: boolean
    gamePhase?: boolean
    game?: boolean
    sessionId?: boolean
  }

  export type PhaseLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "startTime" | "endTime" | "createdAt" | "gameDate" | "gamePhase" | "game" | "sessionId", ExtArgs["result"]["phaseLog"]>

  export type $PhaseLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PhaseLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      startTime: Date
      endTime: Date | null
      createdAt: Date
      gameDate: string
      gamePhase: string
      game: string
      sessionId: number
    }, ExtArgs["result"]["phaseLog"]>
    composites: {}
  }

  type PhaseLogGetPayload<S extends boolean | null | undefined | PhaseLogDefaultArgs> = $Result.GetResult<Prisma.$PhaseLogPayload, S>

  type PhaseLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PhaseLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PhaseLogCountAggregateInputType | true
    }

  export interface PhaseLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PhaseLog'], meta: { name: 'PhaseLog' } }
    /**
     * Find zero or one PhaseLog that matches the filter.
     * @param {PhaseLogFindUniqueArgs} args - Arguments to find a PhaseLog
     * @example
     * // Get one PhaseLog
     * const phaseLog = await prisma.phaseLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhaseLogFindUniqueArgs>(args: SelectSubset<T, PhaseLogFindUniqueArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PhaseLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PhaseLogFindUniqueOrThrowArgs} args - Arguments to find a PhaseLog
     * @example
     * // Get one PhaseLog
     * const phaseLog = await prisma.phaseLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhaseLogFindUniqueOrThrowArgs>(args: SelectSubset<T, PhaseLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhaseLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogFindFirstArgs} args - Arguments to find a PhaseLog
     * @example
     * // Get one PhaseLog
     * const phaseLog = await prisma.phaseLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhaseLogFindFirstArgs>(args?: SelectSubset<T, PhaseLogFindFirstArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PhaseLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogFindFirstOrThrowArgs} args - Arguments to find a PhaseLog
     * @example
     * // Get one PhaseLog
     * const phaseLog = await prisma.phaseLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhaseLogFindFirstOrThrowArgs>(args?: SelectSubset<T, PhaseLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PhaseLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PhaseLogs
     * const phaseLogs = await prisma.phaseLog.findMany()
     * 
     * // Get first 10 PhaseLogs
     * const phaseLogs = await prisma.phaseLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const phaseLogWithIdOnly = await prisma.phaseLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhaseLogFindManyArgs>(args?: SelectSubset<T, PhaseLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PhaseLog.
     * @param {PhaseLogCreateArgs} args - Arguments to create a PhaseLog.
     * @example
     * // Create one PhaseLog
     * const PhaseLog = await prisma.phaseLog.create({
     *   data: {
     *     // ... data to create a PhaseLog
     *   }
     * })
     * 
     */
    create<T extends PhaseLogCreateArgs>(args: SelectSubset<T, PhaseLogCreateArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PhaseLogs.
     * @param {PhaseLogCreateManyArgs} args - Arguments to create many PhaseLogs.
     * @example
     * // Create many PhaseLogs
     * const phaseLog = await prisma.phaseLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhaseLogCreateManyArgs>(args?: SelectSubset<T, PhaseLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PhaseLog.
     * @param {PhaseLogDeleteArgs} args - Arguments to delete one PhaseLog.
     * @example
     * // Delete one PhaseLog
     * const PhaseLog = await prisma.phaseLog.delete({
     *   where: {
     *     // ... filter to delete one PhaseLog
     *   }
     * })
     * 
     */
    delete<T extends PhaseLogDeleteArgs>(args: SelectSubset<T, PhaseLogDeleteArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PhaseLog.
     * @param {PhaseLogUpdateArgs} args - Arguments to update one PhaseLog.
     * @example
     * // Update one PhaseLog
     * const phaseLog = await prisma.phaseLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhaseLogUpdateArgs>(args: SelectSubset<T, PhaseLogUpdateArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PhaseLogs.
     * @param {PhaseLogDeleteManyArgs} args - Arguments to filter PhaseLogs to delete.
     * @example
     * // Delete a few PhaseLogs
     * const { count } = await prisma.phaseLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhaseLogDeleteManyArgs>(args?: SelectSubset<T, PhaseLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PhaseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PhaseLogs
     * const phaseLog = await prisma.phaseLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhaseLogUpdateManyArgs>(args: SelectSubset<T, PhaseLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PhaseLog.
     * @param {PhaseLogUpsertArgs} args - Arguments to update or create a PhaseLog.
     * @example
     * // Update or create a PhaseLog
     * const phaseLog = await prisma.phaseLog.upsert({
     *   create: {
     *     // ... data to create a PhaseLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PhaseLog we want to update
     *   }
     * })
     */
    upsert<T extends PhaseLogUpsertArgs>(args: SelectSubset<T, PhaseLogUpsertArgs<ExtArgs>>): Prisma__PhaseLogClient<$Result.GetResult<Prisma.$PhaseLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PhaseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogCountArgs} args - Arguments to filter PhaseLogs to count.
     * @example
     * // Count the number of PhaseLogs
     * const count = await prisma.phaseLog.count({
     *   where: {
     *     // ... the filter for the PhaseLogs we want to count
     *   }
     * })
    **/
    count<T extends PhaseLogCountArgs>(
      args?: Subset<T, PhaseLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhaseLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PhaseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhaseLogAggregateArgs>(args: Subset<T, PhaseLogAggregateArgs>): Prisma.PrismaPromise<GetPhaseLogAggregateType<T>>

    /**
     * Group by PhaseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhaseLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhaseLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhaseLogGroupByArgs['orderBy'] }
        : { orderBy?: PhaseLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhaseLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhaseLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PhaseLog model
   */
  readonly fields: PhaseLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PhaseLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhaseLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PhaseLog model
   */
  interface PhaseLogFieldRefs {
    readonly id: FieldRef<"PhaseLog", 'Int'>
    readonly startTime: FieldRef<"PhaseLog", 'DateTime'>
    readonly endTime: FieldRef<"PhaseLog", 'DateTime'>
    readonly createdAt: FieldRef<"PhaseLog", 'DateTime'>
    readonly gameDate: FieldRef<"PhaseLog", 'String'>
    readonly gamePhase: FieldRef<"PhaseLog", 'String'>
    readonly game: FieldRef<"PhaseLog", 'String'>
    readonly sessionId: FieldRef<"PhaseLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PhaseLog findUnique
   */
  export type PhaseLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter, which PhaseLog to fetch.
     */
    where: PhaseLogWhereUniqueInput
  }

  /**
   * PhaseLog findUniqueOrThrow
   */
  export type PhaseLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter, which PhaseLog to fetch.
     */
    where: PhaseLogWhereUniqueInput
  }

  /**
   * PhaseLog findFirst
   */
  export type PhaseLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter, which PhaseLog to fetch.
     */
    where?: PhaseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhaseLogs to fetch.
     */
    orderBy?: PhaseLogOrderByWithRelationInput | PhaseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhaseLogs.
     */
    cursor?: PhaseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhaseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhaseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhaseLogs.
     */
    distinct?: PhaseLogScalarFieldEnum | PhaseLogScalarFieldEnum[]
  }

  /**
   * PhaseLog findFirstOrThrow
   */
  export type PhaseLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter, which PhaseLog to fetch.
     */
    where?: PhaseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhaseLogs to fetch.
     */
    orderBy?: PhaseLogOrderByWithRelationInput | PhaseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PhaseLogs.
     */
    cursor?: PhaseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhaseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhaseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PhaseLogs.
     */
    distinct?: PhaseLogScalarFieldEnum | PhaseLogScalarFieldEnum[]
  }

  /**
   * PhaseLog findMany
   */
  export type PhaseLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter, which PhaseLogs to fetch.
     */
    where?: PhaseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PhaseLogs to fetch.
     */
    orderBy?: PhaseLogOrderByWithRelationInput | PhaseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PhaseLogs.
     */
    cursor?: PhaseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PhaseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PhaseLogs.
     */
    skip?: number
    distinct?: PhaseLogScalarFieldEnum | PhaseLogScalarFieldEnum[]
  }

  /**
   * PhaseLog create
   */
  export type PhaseLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * The data needed to create a PhaseLog.
     */
    data: XOR<PhaseLogCreateInput, PhaseLogUncheckedCreateInput>
  }

  /**
   * PhaseLog createMany
   */
  export type PhaseLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PhaseLogs.
     */
    data: PhaseLogCreateManyInput | PhaseLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PhaseLog update
   */
  export type PhaseLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * The data needed to update a PhaseLog.
     */
    data: XOR<PhaseLogUpdateInput, PhaseLogUncheckedUpdateInput>
    /**
     * Choose, which PhaseLog to update.
     */
    where: PhaseLogWhereUniqueInput
  }

  /**
   * PhaseLog updateMany
   */
  export type PhaseLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PhaseLogs.
     */
    data: XOR<PhaseLogUpdateManyMutationInput, PhaseLogUncheckedUpdateManyInput>
    /**
     * Filter which PhaseLogs to update
     */
    where?: PhaseLogWhereInput
    /**
     * Limit how many PhaseLogs to update.
     */
    limit?: number
  }

  /**
   * PhaseLog upsert
   */
  export type PhaseLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * The filter to search for the PhaseLog to update in case it exists.
     */
    where: PhaseLogWhereUniqueInput
    /**
     * In case the PhaseLog found by the `where` argument doesn't exist, create a new PhaseLog with this data.
     */
    create: XOR<PhaseLogCreateInput, PhaseLogUncheckedCreateInput>
    /**
     * In case the PhaseLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhaseLogUpdateInput, PhaseLogUncheckedUpdateInput>
  }

  /**
   * PhaseLog delete
   */
  export type PhaseLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
    /**
     * Filter which PhaseLog to delete.
     */
    where: PhaseLogWhereUniqueInput
  }

  /**
   * PhaseLog deleteMany
   */
  export type PhaseLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PhaseLogs to delete
     */
    where?: PhaseLogWhereInput
    /**
     * Limit how many PhaseLogs to delete.
     */
    limit?: number
  }

  /**
   * PhaseLog without action
   */
  export type PhaseLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PhaseLog
     */
    select?: PhaseLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PhaseLog
     */
    omit?: PhaseLogOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CsvDataScalarFieldEnum: {
    id: 'id',
    Heart_Rate: 'Heart_Rate',
    Timestamp: 'Timestamp'
  };

  export type CsvDataScalarFieldEnum = (typeof CsvDataScalarFieldEnum)[keyof typeof CsvDataScalarFieldEnum]


  export const StateTimestampsScalarFieldEnum: {
    id: 'id',
    stateName: 'stateName',
    startTime: 'startTime'
  };

  export type StateTimestampsScalarFieldEnum = (typeof StateTimestampsScalarFieldEnum)[keyof typeof StateTimestampsScalarFieldEnum]


  export const PhaseLogScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt',
    gameDate: 'gameDate',
    gamePhase: 'gamePhase',
    game: 'game',
    sessionId: 'sessionId'
  };

  export type PhaseLogScalarFieldEnum = (typeof PhaseLogScalarFieldEnum)[keyof typeof PhaseLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StateTimestampsOrderByRelevanceFieldEnum: {
    stateName: 'stateName'
  };

  export type StateTimestampsOrderByRelevanceFieldEnum = (typeof StateTimestampsOrderByRelevanceFieldEnum)[keyof typeof StateTimestampsOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const PhaseLogOrderByRelevanceFieldEnum: {
    gameDate: 'gameDate',
    gamePhase: 'gamePhase',
    game: 'game'
  };

  export type PhaseLogOrderByRelevanceFieldEnum = (typeof PhaseLogOrderByRelevanceFieldEnum)[keyof typeof PhaseLogOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CsvDataWhereInput = {
    AND?: CsvDataWhereInput | CsvDataWhereInput[]
    OR?: CsvDataWhereInput[]
    NOT?: CsvDataWhereInput | CsvDataWhereInput[]
    id?: IntFilter<"CsvData"> | number
    Heart_Rate?: IntFilter<"CsvData"> | number
    Timestamp?: DateTimeFilter<"CsvData"> | Date | string
  }

  export type CsvDataOrderByWithRelationInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
    Timestamp?: SortOrder
  }

  export type CsvDataWhereUniqueInput = Prisma.AtLeast<{
    id_Timestamp?: CsvDataIdTimestampCompoundUniqueInput
    AND?: CsvDataWhereInput | CsvDataWhereInput[]
    OR?: CsvDataWhereInput[]
    NOT?: CsvDataWhereInput | CsvDataWhereInput[]
    id?: IntFilter<"CsvData"> | number
    Heart_Rate?: IntFilter<"CsvData"> | number
    Timestamp?: DateTimeFilter<"CsvData"> | Date | string
  }, "id_Timestamp">

  export type CsvDataOrderByWithAggregationInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
    Timestamp?: SortOrder
    _count?: CsvDataCountOrderByAggregateInput
    _avg?: CsvDataAvgOrderByAggregateInput
    _max?: CsvDataMaxOrderByAggregateInput
    _min?: CsvDataMinOrderByAggregateInput
    _sum?: CsvDataSumOrderByAggregateInput
  }

  export type CsvDataScalarWhereWithAggregatesInput = {
    AND?: CsvDataScalarWhereWithAggregatesInput | CsvDataScalarWhereWithAggregatesInput[]
    OR?: CsvDataScalarWhereWithAggregatesInput[]
    NOT?: CsvDataScalarWhereWithAggregatesInput | CsvDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CsvData"> | number
    Heart_Rate?: IntWithAggregatesFilter<"CsvData"> | number
    Timestamp?: DateTimeWithAggregatesFilter<"CsvData"> | Date | string
  }

  export type StateTimestampsWhereInput = {
    AND?: StateTimestampsWhereInput | StateTimestampsWhereInput[]
    OR?: StateTimestampsWhereInput[]
    NOT?: StateTimestampsWhereInput | StateTimestampsWhereInput[]
    id?: IntFilter<"StateTimestamps"> | number
    stateName?: StringFilter<"StateTimestamps"> | string
    startTime?: DateTimeFilter<"StateTimestamps"> | Date | string
  }

  export type StateTimestampsOrderByWithRelationInput = {
    id?: SortOrder
    stateName?: SortOrder
    startTime?: SortOrder
    _relevance?: StateTimestampsOrderByRelevanceInput
  }

  export type StateTimestampsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StateTimestampsWhereInput | StateTimestampsWhereInput[]
    OR?: StateTimestampsWhereInput[]
    NOT?: StateTimestampsWhereInput | StateTimestampsWhereInput[]
    stateName?: StringFilter<"StateTimestamps"> | string
    startTime?: DateTimeFilter<"StateTimestamps"> | Date | string
  }, "id">

  export type StateTimestampsOrderByWithAggregationInput = {
    id?: SortOrder
    stateName?: SortOrder
    startTime?: SortOrder
    _count?: StateTimestampsCountOrderByAggregateInput
    _avg?: StateTimestampsAvgOrderByAggregateInput
    _max?: StateTimestampsMaxOrderByAggregateInput
    _min?: StateTimestampsMinOrderByAggregateInput
    _sum?: StateTimestampsSumOrderByAggregateInput
  }

  export type StateTimestampsScalarWhereWithAggregatesInput = {
    AND?: StateTimestampsScalarWhereWithAggregatesInput | StateTimestampsScalarWhereWithAggregatesInput[]
    OR?: StateTimestampsScalarWhereWithAggregatesInput[]
    NOT?: StateTimestampsScalarWhereWithAggregatesInput | StateTimestampsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StateTimestamps"> | number
    stateName?: StringWithAggregatesFilter<"StateTimestamps"> | string
    startTime?: DateTimeWithAggregatesFilter<"StateTimestamps"> | Date | string
  }

  export type PhaseLogWhereInput = {
    AND?: PhaseLogWhereInput | PhaseLogWhereInput[]
    OR?: PhaseLogWhereInput[]
    NOT?: PhaseLogWhereInput | PhaseLogWhereInput[]
    id?: IntFilter<"PhaseLog"> | number
    startTime?: DateTimeFilter<"PhaseLog"> | Date | string
    endTime?: DateTimeNullableFilter<"PhaseLog"> | Date | string | null
    createdAt?: DateTimeFilter<"PhaseLog"> | Date | string
    gameDate?: StringFilter<"PhaseLog"> | string
    gamePhase?: StringFilter<"PhaseLog"> | string
    game?: StringFilter<"PhaseLog"> | string
    sessionId?: IntFilter<"PhaseLog"> | number
  }

  export type PhaseLogOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    gameDate?: SortOrder
    gamePhase?: SortOrder
    game?: SortOrder
    sessionId?: SortOrder
    _relevance?: PhaseLogOrderByRelevanceInput
  }

  export type PhaseLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PhaseLogWhereInput | PhaseLogWhereInput[]
    OR?: PhaseLogWhereInput[]
    NOT?: PhaseLogWhereInput | PhaseLogWhereInput[]
    startTime?: DateTimeFilter<"PhaseLog"> | Date | string
    endTime?: DateTimeNullableFilter<"PhaseLog"> | Date | string | null
    createdAt?: DateTimeFilter<"PhaseLog"> | Date | string
    gameDate?: StringFilter<"PhaseLog"> | string
    gamePhase?: StringFilter<"PhaseLog"> | string
    game?: StringFilter<"PhaseLog"> | string
    sessionId?: IntFilter<"PhaseLog"> | number
  }, "id">

  export type PhaseLogOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    gameDate?: SortOrder
    gamePhase?: SortOrder
    game?: SortOrder
    sessionId?: SortOrder
    _count?: PhaseLogCountOrderByAggregateInput
    _avg?: PhaseLogAvgOrderByAggregateInput
    _max?: PhaseLogMaxOrderByAggregateInput
    _min?: PhaseLogMinOrderByAggregateInput
    _sum?: PhaseLogSumOrderByAggregateInput
  }

  export type PhaseLogScalarWhereWithAggregatesInput = {
    AND?: PhaseLogScalarWhereWithAggregatesInput | PhaseLogScalarWhereWithAggregatesInput[]
    OR?: PhaseLogScalarWhereWithAggregatesInput[]
    NOT?: PhaseLogScalarWhereWithAggregatesInput | PhaseLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PhaseLog"> | number
    startTime?: DateTimeWithAggregatesFilter<"PhaseLog"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"PhaseLog"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PhaseLog"> | Date | string
    gameDate?: StringWithAggregatesFilter<"PhaseLog"> | string
    gamePhase?: StringWithAggregatesFilter<"PhaseLog"> | string
    game?: StringWithAggregatesFilter<"PhaseLog"> | string
    sessionId?: IntWithAggregatesFilter<"PhaseLog"> | number
  }

  export type CsvDataCreateInput = {
    id: number
    Heart_Rate: number
    Timestamp: Date | string
  }

  export type CsvDataUncheckedCreateInput = {
    id: number
    Heart_Rate: number
    Timestamp: Date | string
  }

  export type CsvDataUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Heart_Rate?: IntFieldUpdateOperationsInput | number
    Timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CsvDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Heart_Rate?: IntFieldUpdateOperationsInput | number
    Timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CsvDataCreateManyInput = {
    id: number
    Heart_Rate: number
    Timestamp: Date | string
  }

  export type CsvDataUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    Heart_Rate?: IntFieldUpdateOperationsInput | number
    Timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CsvDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Heart_Rate?: IntFieldUpdateOperationsInput | number
    Timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateTimestampsCreateInput = {
    stateName: string
    startTime: Date | string
  }

  export type StateTimestampsUncheckedCreateInput = {
    id?: number
    stateName: string
    startTime: Date | string
  }

  export type StateTimestampsUpdateInput = {
    stateName?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateTimestampsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stateName?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateTimestampsCreateManyInput = {
    id?: number
    stateName: string
    startTime: Date | string
  }

  export type StateTimestampsUpdateManyMutationInput = {
    stateName?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StateTimestampsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stateName?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhaseLogCreateInput = {
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    gameDate: string
    gamePhase: string
    game: string
    sessionId?: number
  }

  export type PhaseLogUncheckedCreateInput = {
    id?: number
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    gameDate: string
    gamePhase: string
    game: string
    sessionId?: number
  }

  export type PhaseLogUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameDate?: StringFieldUpdateOperationsInput | string
    gamePhase?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    sessionId?: IntFieldUpdateOperationsInput | number
  }

  export type PhaseLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameDate?: StringFieldUpdateOperationsInput | string
    gamePhase?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    sessionId?: IntFieldUpdateOperationsInput | number
  }

  export type PhaseLogCreateManyInput = {
    id?: number
    startTime: Date | string
    endTime?: Date | string | null
    createdAt?: Date | string
    gameDate: string
    gamePhase: string
    game: string
    sessionId?: number
  }

  export type PhaseLogUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameDate?: StringFieldUpdateOperationsInput | string
    gamePhase?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    sessionId?: IntFieldUpdateOperationsInput | number
  }

  export type PhaseLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameDate?: StringFieldUpdateOperationsInput | string
    gamePhase?: StringFieldUpdateOperationsInput | string
    game?: StringFieldUpdateOperationsInput | string
    sessionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CsvDataIdTimestampCompoundUniqueInput = {
    id: number
    Timestamp: Date | string
  }

  export type CsvDataCountOrderByAggregateInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
    Timestamp?: SortOrder
  }

  export type CsvDataAvgOrderByAggregateInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
  }

  export type CsvDataMaxOrderByAggregateInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
    Timestamp?: SortOrder
  }

  export type CsvDataMinOrderByAggregateInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
    Timestamp?: SortOrder
  }

  export type CsvDataSumOrderByAggregateInput = {
    id?: SortOrder
    Heart_Rate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StateTimestampsOrderByRelevanceInput = {
    fields: StateTimestampsOrderByRelevanceFieldEnum | StateTimestampsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StateTimestampsCountOrderByAggregateInput = {
    id?: SortOrder
    stateName?: SortOrder
    startTime?: SortOrder
  }

  export type StateTimestampsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StateTimestampsMaxOrderByAggregateInput = {
    id?: SortOrder
    stateName?: SortOrder
    startTime?: SortOrder
  }

  export type StateTimestampsMinOrderByAggregateInput = {
    id?: SortOrder
    stateName?: SortOrder
    startTime?: SortOrder
  }

  export type StateTimestampsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PhaseLogOrderByRelevanceInput = {
    fields: PhaseLogOrderByRelevanceFieldEnum | PhaseLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PhaseLogCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    gameDate?: SortOrder
    gamePhase?: SortOrder
    game?: SortOrder
    sessionId?: SortOrder
  }

  export type PhaseLogAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
  }

  export type PhaseLogMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    gameDate?: SortOrder
    gamePhase?: SortOrder
    game?: SortOrder
    sessionId?: SortOrder
  }

  export type PhaseLogMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    gameDate?: SortOrder
    gamePhase?: SortOrder
    game?: SortOrder
    sessionId?: SortOrder
  }

  export type PhaseLogSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}